/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var x=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var T=Object.prototype.hasOwnProperty;var k=(f,m)=>{for(var s in m)x(f,s,{get:m[s],enumerable:!0})},A=(f,m,s,e)=>{if(m&&typeof m=="object"||typeof m=="function")for(let t of E(m))!T.call(f,t)&&t!==s&&x(f,t,{get:()=>m[t],enumerable:!(e=D(m,t))||e.enumerable});return f};var M=f=>A(x({},"__esModule",{value:!0}),f);var I={};k(I,{default:()=>b});module.exports=M(I);var i=require("obsidian"),$={enableUnderscorePrefix:!1,defaultTemplate:`---
title: "{{title}}"
date: {{date}}
description: ""
tags: []
---
`,linkBasePath:"/blog/",postsFolder:"posts",automatePostCreation:!0,autoInsertProperties:!0,creationMode:"file",indexFileName:"index",dateFormat:"YYYY-MM-DD HH:mm",excludedDirectories:"",onlyAutomateInPostsFolder:!1},b=class extends i.Plugin{async onload(){await this.loadSettings(),this.app.workspace.onLayoutReady(()=>{this.registerCreateEvent()}),this.addCommand({id:"standardize-properties",name:"Standardize Properties",icon:"file-check",editorCallback:(s,e)=>{e.file instanceof i.TFile&&this.standardizeProperties(e.file)}}),this.addCommand({id:"convert-wikilinks-astro",name:"Convert internal links for Astro",icon:"link-2",editorCallback:(s,e)=>{e.file instanceof i.TFile&&this.convertWikilinksForAstro(s,e.file)}}),this.addSettingTab(new v(this.app,this))}registerCreateEvent(){if(this.createEvent&&this.app.vault.off("create",this.createEvent),this.settings.automatePostCreation){let s=0,e=500;this.createEvent=async t=>{let n=Date.now();if(!(n-s<e)&&(s=n,t instanceof i.TFile&&t.extension==="md")){let c=t.path,o=this.settings.postsFolder||"",r=await this.app.vault.adapter.stat(t.path),u=(r==null?void 0:r.mtime)&&n-r.mtime<1e3,h=(await this.app.vault.read(t)).trim()==="";if(!u||!h)return;if(this.settings.onlyAutomateInPostsFolder){if(!o||c.startsWith(o+"/")||c===o){let d=this.app.metadataCache.getCache(t.path);(!d||!d.sections||d.sections.length===0)&&new y(this.app,t,this).open()}}else if(!this.settings.excludedDirectories.split("|").map(p=>p.trim()).filter(p=>p.length>0).some(p=>c.startsWith(p+"/")||c===p)){let p=this.app.metadataCache.getCache(t.path);(!p||!p.sections||p.sections.length===0)&&new y(this.app,t,this).open()}}},this.registerEvent(this.app.vault.on("create",this.createEvent))}}toKebabCase(s){return s.toLowerCase().replace(/[^a-z0-9\s-]/g,"").trim().replace(/\s+/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"")}async createPostFile(s,e){if(!e)return new i.Notice("Title is required to create a post."),null;let t=this.toKebabCase(e),n=this.settings.enableUnderscorePrefix?"_":"",c=this.settings.postsFolder||"";if(c&&(this.app.vault.getAbstractFileByPath(c)instanceof i.TFolder||await this.app.vault.createFolder(c)),this.settings.creationMode==="folder"){let o=`${n}${t}`,r=c?`${c}/${o}`:o;try{this.app.vault.getAbstractFileByPath(r)instanceof i.TFolder||await this.app.vault.createFolder(r)}catch(d){}let u=`${this.settings.indexFileName}.md`,a=`${r}/${u}`;if(this.app.vault.getAbstractFileByPath(a)instanceof i.TFile)return new i.Notice(`File already exists at ${a}.`),null;try{await this.app.vault.rename(s,a);let d=this.app.vault.getAbstractFileByPath(a);return d instanceof i.TFile?(setTimeout(()=>{let p=this.app.workspace.getLeavesOfType("file-explorer")[0];if(p&&p.view){let l=p.view.tree;l&&d instanceof i.TFile&&l.revealFile(d)}},200),await this.app.workspace.getLeaf(!1).openFile(d),this.settings.autoInsertProperties&&await this.addPropertiesToFile(d,e),d):null}catch(d){return new i.Notice(`Failed to create folder structure: ${d.message}.`),null}}else{let o=`${n}${t}.md`,r=c?`${c}/${o}`:o,u=this.app.vault.getAbstractFileByPath(r);if(u instanceof i.TFile&&u!==s)return new i.Notice(`File with name "${o}" already exists.`),null;try{await this.app.vault.rename(s,r);let a=this.app.vault.getAbstractFileByPath(r);return a instanceof i.TFile?(await this.app.workspace.getLeaf(!1).openFile(a),this.settings.autoInsertProperties&&await this.addPropertiesToFile(a,e),a):null}catch(a){return new i.Notice(`Failed to rename file: ${a.message}.`),null}}}async addPropertiesToFile(s,e,t){let n=new Date,c=window.moment(n).format(this.settings.dateFormat),o=this.settings.defaultTemplate;o=o.replace(/\{\{title\}\}/g,e),o=o.replace(/\{\{date\}\}/g,c),await this.app.vault.modify(s,o)}async standardizeProperties(s){if(!(s instanceof i.TFile)){new i.Notice("No active file.");return}await new Promise(l=>setTimeout(l,100));let e=await this.app.vault.read(s),t=s.basename.replace(/^_/,""),n=0,c={};if(e.startsWith("---")){n=e.indexOf(`
---`,3),n===-1?n=e.length:n+=4;let l=e.slice(4,n-4).trim();try{l.split(`
`).forEach(w=>{let F=w.match(/^(\w+):\s*(.+)$/);if(F){let[,C,P]=F;c[C]=P}})}catch(w){console.log("Failed to parse properties:",l,w),new i.Notice("Falling back to template due to parsing error.")}}let o=this.settings.defaultTemplate.split(`
`),r=[],u={},a=!1;for(let l=0;l<o.length;l++){let w=o[l].trim();if(w==="---"){if(a=!a,!a)break;continue}if(a){let F=w.match(/^(\w+):\s*(.+)$/);if(F){let[,C,P]=F;r.push(C),u[C]=P}}}let h=window.moment(new Date).format(this.settings.dateFormat),d={...c};for(let l of r)l in d||(l==="title"?d[l]=`"${t}"`:l==="date"?d[l]=h:d[l]=u[l]||"");let g=`---
`;for(let l of r)g+=`${l}: ${d[l]}
`;for(let l in d)r.includes(l)||(g+=`${l}: ${d[l]}
`);g+="---";let p=e.slice(n).trim();g+=p?`
`+p:"",await this.app.vault.modify(s,g),new i.Notice("Properties standardized using template.")}async convertWikilinksForAstro(s,e){if(!(e instanceof i.TFile)){new i.Notice("No active file.");return}let n=s.getValue(),c=/\.(png|jpg|jpeg|gif|svg)$/i;n=n.replace(/\[\[([^\]|]+)(\|([^\]]+))?\]\]/g,(o,r,u,a)=>{if(c.test(r))return o;let h=a||r.replace(/\.md$/,""),d=this.toKebabCase(r.replace(/\.md$/,"")),g=this.settings.linkBasePath;return g.startsWith("/")||(g="/"+g),g.endsWith("/")||(g=g+"/"),`[${h}](${g}${d}/)`}),n=n.replace(/\[([^\]]+)\]\(([^)]+\.md)\)/g,(o,r,u)=>{if(c.test(u)||u.match(/^https?:\/\//))return o;let a=this.toKebabCase(u.replace(/\.md$/,"")),h=this.settings.linkBasePath;return h.startsWith("/")||(h="/"+h),h.endsWith("/")||(h=h+"/"),`[${r}](${h}${a}/)`}),n=n.replace(/!\[(.*?)\]\(([^)]+)\)/g,o=>o),n=n.replace(/\{\{([^}]+)\}\}/g,(o,r)=>{if(c.test(r))return o;let u=this.toKebabCase(r.replace(".md","")),a=this.settings.linkBasePath;return a.startsWith("/")||(a="/"+a),a.endsWith("/")||(a=a+"/"),`[Embedded: ${r}](${a}${u}/)`}),s.setValue(n),new i.Notice("All internal links converted for Astro.")}async loadSettings(){this.settings=Object.assign({},$,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},y=class extends i.Modal{constructor(s,e,t){super(s);this.file=e,this.plugin=t}onOpen(){let{contentEl:s}=this;s.empty(),s.createEl("h2",{text:"New Blog Post"}),s.createEl("p",{text:"Enter a title for your blog post:"}),this.titleInput=s.createEl("input",{type:"text",placeholder:"My Awesome Blog Post",cls:"astro-composer-title-input"}),this.titleInput.focus();let e=s.createDiv({cls:"astro-composer-button-container"}),t=e.createEl("button",{text:"Cancel",cls:"astro-composer-cancel-button"});t.onclick=()=>this.close();let n=e.createEl("button",{text:"Create",cls:["astro-composer-create-button","mod-cta"]});n.onclick=()=>this.createPost(),this.titleInput.addEventListener("keypress",c=>{c.key==="Enter"&&this.createPost()})}async createPost(){let s=this.titleInput.value.trim();if(!s){new i.Notice("Please enter a title.");return}try{let e=await this.plugin.createPostFile(this.file,s);e&&this.plugin.settings.autoInsertProperties&&await this.plugin.addPropertiesToFile(e,s)}catch(e){new i.Notice(`Error creating post: ${e.message}.`)}this.close()}onClose(){let{contentEl:s}=this;s.empty()}},v=class extends i.PluginSettingTab{constructor(s,e){super(s,e);this.autoRenameContainer=null;this.postsFolderContainer=null;this.onlyAutomateContainer=null;this.creationModeContainer=null;this.indexFileContainer=null;this.excludedDirsContainer=null;this.underscorePrefixContainer=null;this.autoInsertContainer=null;this.plugin=e}display(){let{containerEl:s}=this;s.empty(),new i.Setting(s).setName("Automate post creation").setDesc("Automatically show title dialog for new .md files, rename them based on the title, and insert properties if enabled.").addToggle(e=>e.setValue(this.plugin.settings.automatePostCreation).onChange(async t=>{this.plugin.settings.automatePostCreation=t,this.plugin.settings.autoInsertProperties=t,await this.plugin.saveSettings(),this.plugin.registerCreateEvent(),this.updateConditionalFields()})),this.autoRenameContainer=s.createDiv({cls:"auto-rename-fields"}),this.autoRenameContainer.style.display=this.plugin.settings.automatePostCreation?"block":"none",this.autoInsertContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.autoInsertContainer).setName("Auto-insert properties").setDesc("Automatically insert the properties template when creating new files (requires 'Automate post creation' to be enabled).").addToggle(e=>e.setValue(this.plugin.settings.autoInsertProperties).setDisabled(!this.plugin.settings.automatePostCreation).onChange(async t=>{this.plugin.settings.autoInsertProperties=t,await this.plugin.saveSettings()})),this.postsFolderContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.postsFolderContainer).setName("Posts folder").setDesc("Folder name for blog posts (leave blank to use the vault folder). You can specify the default location for new notes in Obsidian's 'Files and links' settings.").addText(e=>e.setPlaceholder("Enter folder path").setValue(this.plugin.settings.postsFolder).onChange(async t=>{this.plugin.settings.postsFolder=t,await this.plugin.saveSettings()})),this.onlyAutomateContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.onlyAutomateContainer).setName("Only automate in this folder").setDesc("When enabled, automation will only trigger for new .md files within the specified Posts folder and subfolders.").addToggle(e=>e.setValue(this.plugin.settings.onlyAutomateInPostsFolder).onChange(async t=>{this.plugin.settings.onlyAutomateInPostsFolder=t,await this.plugin.saveSettings(),this.updateExcludedDirsField()})),this.excludedDirsContainer=this.autoRenameContainer.createDiv({cls:"excluded-dirs-field"}),this.excludedDirsContainer.style.display=this.plugin.settings.onlyAutomateInPostsFolder?"none":"block",new i.Setting(this.excludedDirsContainer).setName("Excluded directories").setDesc("Directories to exclude from automatic post creation (e.g., pages|posts/example). Excluded directories and their child folders will be ignored. Use '|' to separate multiple directories.").addText(e=>e.setPlaceholder("pages|posts/example").setValue(this.plugin.settings.excludedDirectories).onChange(async t=>{this.plugin.settings.excludedDirectories=t,await this.plugin.saveSettings()})),this.creationModeContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.creationModeContainer).setName("Creation mode").setDesc("How to create new posts: file-based or folder-based with index.md.").addDropdown(e=>e.addOption("file","File-based (post-title.md)").addOption("folder","Folder-based (post-title/index.md)").setValue(this.plugin.settings.creationMode).onChange(async t=>{this.plugin.settings.creationMode=t,await this.plugin.saveSettings(),this.updateIndexFileField()})),this.indexFileContainer=this.autoRenameContainer.createDiv({cls:"index-file-field"}),this.indexFileContainer.style.display=this.plugin.settings.creationMode==="folder"?"block":"none",new i.Setting(this.indexFileContainer).setName("Index file name").setDesc("Name for the main file in folder-based mode (without .md extension).").addText(e=>e.setPlaceholder("index").setValue(this.plugin.settings.indexFileName).onChange(async t=>{this.plugin.settings.indexFileName=t||"index",await this.plugin.saveSettings()})),this.underscorePrefixContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.underscorePrefixContainer).setName("Use underscore prefix for drafts").setDesc("Add an underscore prefix (_post-title) to new notes by default when enabled. This hides them from Astro, which can be helpful for post drafts. Disable to skip prefixing.").addToggle(e=>e.setValue(this.plugin.settings.enableUnderscorePrefix).onChange(async t=>{this.plugin.settings.enableUnderscorePrefix=t,await this.plugin.saveSettings()})),new i.Setting(s).setName("Link base path").setDesc("Base path for converted links (e.g., /blog/, leave blank for root domain).").addText(e=>e.setPlaceholder("/blog/").setValue(this.plugin.settings.linkBasePath).onChange(async t=>{this.plugin.settings.linkBasePath=t,await this.plugin.saveSettings()})),new i.Setting(s).setName("Date format").setDesc("Format for the date in properties (e.g., YYYY-MM-DD, MMMM D, YYYY, YYYY-MM-DD HH:mm).").addText(e=>e.setPlaceholder("YYYY-MM-DD HH:mm").setValue(this.plugin.settings.dateFormat).onChange(async t=>{this.plugin.settings.dateFormat=t||"YYYY-MM-DD HH:mm",await this.plugin.saveSettings()})),new i.Setting(s).setName("Properties template").addTextArea(e=>{let t=this.plugin;return e.setPlaceholder(`---
title: "{{title}}"
date: {{date}}
description: ""
tags: []
---
`).setValue(t.settings.defaultTemplate).onChange(async n=>{t.settings.defaultTemplate=n,await t.saveSettings()}),e.inputEl.classList.add("astro-composer-template-textarea"),e}).then(e=>{e.descEl.empty();let t=e.descEl.createEl("div");t.innerHTML="Used for new posts and when standardizing properties.<br />Variables include {{title}} and {{date}}.<br />Do not wrap {{date}} in quotes as it represents a datetime value, not a string.<br />The 'standardize properties' command ignores anything below the second '---' line."}),this.updateConditionalFields(),this.updateIndexFileField(),this.updateExcludedDirsField()}updateConditionalFields(){this.autoRenameContainer&&(this.autoRenameContainer.style.display=this.plugin.settings.automatePostCreation?"block":"none")}updateIndexFileField(){this.indexFileContainer&&(this.indexFileContainer.style.display=this.plugin.settings.creationMode==="folder"?"block":"none")}updateExcludedDirsField(){this.excludedDirsContainer&&(this.excludedDirsContainer.style.display=this.plugin.settings.onlyAutomateInPostsFolder?"none":"block")}};
